题目：设计题，实现tweeter。
解题：注意调用静态方法用::域操作符，而不是.操作符！getNewsFeed函数注意用set实现。
/**
 * Definition of Tweet:
 * class Tweet {
 * public:
 *     int id;
 *     int user_id;
 *     String text;
 *     static Tweet create(int user_id, string tweet_text) {
 *         // This will create a new tweet object,
 *         // and auto fill id
 *     }
 * }
 */
class MiniTwitter {
private:
    unordered_map<int, vector<Tweet> >tweet;
    unordered_map<int, unordered_set<int> >frien;
    struct comp{
        bool operator()(const Tweet& t1, const Tweet& t2) {
            return t1.id < t2.id;
        }
    };
public:
    MiniTwitter() {
        // initialize your data structure here.
    }
    /*static bool comp(const Tweet& t1, const Tweet& t2) {
        return t1.id < t2.id;
    }*/
    // @param user_id an integer
    // @param tweet a string
    // return a tweet
    Tweet postTweet(int user_id, string tweet_text) {
        //  Write your code here
        tweet[user_id].push_back(Tweet::create(user_id, tweet_text));
        return tweet[user_id].back();
    }

    // @param user_id an integer
    // return a list of 10 new feeds recently
    // and sort by timeline
    vector<Tweet> getNewsFeed(int user_id) {
        // Write your code here
        set<Tweet, comp>s;
        vector<Tweet>res = getTimeline(user_id);
        for(auto i: res) {
            s.insert(i);
        }
        for(auto i: frien[user_id]) {
            vector<Tweet>tmp = getTimeline(i);
            for(auto j: tmp) {
                s.insert(j);
                if(s.size() > 10)
                    s.erase(*s.begin());
            }
        }
        return vector<Tweet>(s.rbegin(), s.rend());
    }
        
    // @param user_id an integer
    // return a list of 10 new posts recently
    // and sort by timeline
    vector<Tweet>  getTimeline(int user_id) {
        // Write your code here
        vector<Tweet>res;
        vector<Tweet>tmp = tweet[user_id];
        for(int i = 0; i < 10 && i < tmp.size(); i++) {
            res.push_back(tmp[tmp.size() - i - 1]);
        }
        return res;
    }

    // @param from_user_id an integer
    // @param to_user_id an integer
    // from user_id follows to_user_id
    void follow(int from_user_id, int to_user_id) {
        // Write your code here
        frien[from_user_id].insert(to_user_id);
    }

    // @param from_user_id an integer
    // @param to_user_id an integer
    // from user_id unfollows to_user_id
    void unfollow(int from_user_id, int to_user_id) {
        // Write your code here
        if(frien.count(from_user_id) != 0)
            frien[from_user_id].erase(to_user_id);
    }
};