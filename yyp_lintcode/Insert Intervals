题目：插入区间。
解题：先找插入位置，然后将与该区间有交集的区间合并入该区间。
/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */
 /*public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
    List<Interval> result = new LinkedList<>();
    int i = 0;
    // add all the intervals ending before newInterval starts
    while (i < intervals.size() && intervals.get(i).end < newInterval.start)
        result.add(intervals.get(i++));
    // merge all overlapping intervals to one considering newInterval
    while (i < intervals.size() && intervals.get(i).start <= newInterval.end) {
        newInterval = new Interval( // we could mutate newInterval here also
                Math.min(newInterval.start, intervals.get(i).start),
                Math.max(newInterval.end, intervals.get(i).end));
        i++;
    }
    result.add(newInterval); // add the union of intervals we got
    // add all the rest
    while (i < intervals.size()) result.add(intervals.get(i++)); 
    return result;
}*/
/*
vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        if(intervals.size() == 0) return vector<Interval>(1, newInterval);
        int i = 0, j, n = intervals.size();
        while(i < n && newInterval.start > intervals[i].end) i++;
        int s = i;
        while(i < n && newInterval.end >= intervals[i].start) {
            newInterval.start = min(newInterval.start, intervals[i].start);
            newInterval.end = max(newInterval.end, intervals[i].end);
            i++;
        }
        intervals.insert(intervals.begin() + i, newInterval);
        if(i - s >= 1)
            intervals.erase(intervals.begin() + s, intervals.begin() + i);
        return intervals;
    }
    */
class Solution {
public:
    /**
     * Insert newInterval into intervals.
     * @param intervals: Sorted interval list.
     * @param newInterval: new interval.
     * @return: A new interval list.
     */
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // write your code here
        int i = 0, l = intervals.size(), j;
        while(i < l && newInterval.start > intervals[i].end) i++;
        if(i == l ) {
            intervals.push_back(newInterval);
            return intervals;
        }
        newInterval.start = min(newInterval.start, intervals[i].start);
        j = i;
        while(j < l && newInterval.end >= intervals[j].start) j++;
        newInterval.end = max(newInterval.end, intervals[j - 1].end);
        intervals.insert(intervals.begin() + i, newInterval);
        if(j - i > 0)
            intervals.erase(intervals.begin() + i + 1, intervals.begin() + j + 1);
        return intervals;
    }
};