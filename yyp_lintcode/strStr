题目：
	给定字符串s和t，判断t是否在s中。
解题：
	暴力。可练习用kmp。
问题：
	对const char*的字符串不知如何处理，strlen(s)是求长度，遍历操作与string一致。

class Solution {
public:
    /**
     * Returns a index to the first occurrence of target in source,
     * or -1  if target is not part of source.
     * @param source string to be scanned.
     * @param target string containing the sequence of characters to match.
     */
    int strStr(const char *source, const char *target) {
        // write your code here
        if(source == NULL || target == NULL) return -1;
        int l1 = strlen(source), l2 = strlen(target);
        if(l2 == 0) return 0;
        vector<int>next = getNext(target);
        int i = 0, j = 0;
        while(i < l1 && j < l2) {
            if(-1 == j || source[i] == target[j]) {
                i++;
                j++;
            } else {
                j = next[j];
            }
        }
        if(j == l2) return i - l2;
        return -1;
    }
    vector<int>getNext(const char * s) {
        int j = -1, k = 0,l = strlen(s);
        vector<int>res(l + 1, -1);
        while(k < l) {
            if(j == -1 || s[j] == s[k]) {
                j++;
                k++;
                res[k] = j;
            } else {
                j = res[j];
            }
        }
        return res;
    }
};
/*
int strStr(const char *source, const char *target) {
        // write your code here
        if(source == NULL || target == NULL) return -1;
        int l1 = strlen(source), l2 = strlen(target);
        if(l2 == 0) return 0;
        for(int i = 0; i + l2 <= l1; i++) {
            int j;
            int k = i;
            for(j = 0; j < l2; j++) {
                if(source[k++] != target[j]) break;
                
            }
            if(j == l2) return i;
        }
        return -1;
    }
    */