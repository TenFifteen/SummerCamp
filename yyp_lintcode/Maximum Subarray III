题目：k段最大连续字段和。
解题：动归，转移方程为f[i][j] = max(f[i][j], f[i][j - 1], max(f[i - 1][m] + m-j连续和))
class Solution {
public:
    /**
     * @param nums: A list of integers
     * @param k: An integer denote to find k non-overlapping subarrays
     * @return: An integer denote the sum of max k non-overlapping subarrays
     */
    int maxSubArray(vector<int> nums, int k) {
        // write your code here
        int l = nums.size();
        vector<vector<int> >f(k + 1, vector<int>(l, INT_MIN));
        for(int i = 0; i < l; i++)
            f[0][i] = 0;
        for(int i = 1; i <= k; i++) {
            for(int j = 0; j < l; j++) {
                if(i <= j + 1) {
                    f[i][j] = (i <= j ? max(f[i][j], f[i][j - 1]) : f[i][j]);
                    int tmp = 0;
                    for(int m = 0; j - m >= i - 1; m++) {
                        tmp += nums[j - m];
                        f[i][j] = max(f[i][j], tmp + f[i - 1][j - m - 1]);
                    }
                }
            }
        }
        return f[k][l - 1];
    }
};
