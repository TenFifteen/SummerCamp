题目：k个人复制n本书，同一个人只能复制连续的书，求复制所有书需要的最短时长。
解题：二分。注意初始值，最少时长。动归代码见下面
class Solution {
public:
    /**
     * @param pages: a vector of integers
     * @param k: an integer
     * @return: an integer
     */
    int copyBooks(vector<int> &pages, int k) {
        // write your code here
        int count = 0, res = 0, maxnum = INT_MIN;
        for(auto i: pages) {
            count += i;
            maxnum = max(maxnum, i);
        }
        int low = max(maxnum, count / k), high = count, mid;
        while(low < high) {
            mid = (low + high) / 2;
            int pre = 0, num = 0;
            for(auto i: pages) {
                if(pre + i > mid) {
                    num++;
                    pre = i;
                } else {
                    pre += i;
                }
            }
            num++;
            if(num > k) low = mid + 1;
            else if(num <= k) high = mid;
        }
        return low;
    }
};
/*
int copyBooks(vector<int> &pages, int k) {
    int n = pages.size();
    if (n == 1) return pages[0];
    vector<vector<int> > dp(k, vector<int>(n, INT_MAX));

    // more person than books
    int ans = 0;
    if (k >= n) {
        for (int i = 0; i < n; ++i) ans = max(ans, pages[i]);
        return ans;
    }

    // only one person
    dp[0][0] = pages[0];
    for (int i = 1; i < n; ++i) {
        dp[0][i] = pages[i] + dp[0][i-1];
    }

    for (int i = 1; i < k; ++i) {
        for (int j = 0; j < n; ++j) {
            int sum = pages[j];
            int l = j - 1;

            // init
            if (j == 0) dp[i][j] = pages[0];
            else dp[i][j] =  max(sum, dp[i-1][l]);

            // else
            while (l >= 0 && dp[i-1][l] > sum) {
                dp[i][j] = min(dp[i][j], max(sum, dp[i-1][l]));
                sum += pages[l];
                --l;
            }
        }
    }

    return dp[k-1][n-1];
}
*/
