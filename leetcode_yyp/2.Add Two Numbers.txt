/*
题目大意：
	给定用链表表示的两个非负数，每位数字按照逆序存在链表中，每个节点存一个数字，计算这两个数的和，用同样的链表返回。
解题思路：
	为避免单独处理一个链表空另一个非空的情况，在一个while循环中判断若当前链接为NULL时，所加数字为0即可，直到两个链表都为空。
	最后判断若还有进位，即进位r=1，则在结果链表尾部添加值为1的节点。
注意的点:
	长时间不用链表，声明、初始化链表时多加注意。
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
	{
		ListNode* result = new ListNode(0);
		ListNode* ptr = result;
		int r = 0,sum;
		
		while(l1 != NULL || l2 != NULL)
		{
			int val1 = 0;
			if(l1 != NULL)
			{
				val1 = l1->val;
				l1 = l1->next;
			}
			int val2 = 0;
			if(l2 != NULL)
			{
				val2 = l2->val;
				l2 = l2->next;
			}
			
			sum = val1 + val2 + r;
			ptr->next = new ListNode(sum % 10);
			ptr = ptr->next;
			r = sum / 10;
		}	
		if(r == 1)
		{
			ptr->next = new ListNode(1);
		}
		return result->next;
    }
};