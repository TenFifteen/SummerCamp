题目大意：
	给定n个气球，每个气球上都有0-100的数字，现在一个一个把气球弄爆炸，每次爆炸都可得到nums[left]*nums[i]*nums[right]的金币，求最大金币数。
解题思路：
	分治。首先把数字为0的气球炸掉，然后对其他的气球进行分治，第一个和最后一个气球一定是最后爆炸的，尝试从左到右编号为i的气球除第一个和最后一个成为最后一个爆炸的气球，即可将两边的气球分开成独立的子问题。
class Solution {
public:
    int burst(vector<int>& nums, vector<vector<int> >&memo, int left, int right)
    {
        if(left + 1 == right)
            return 0;
        if(memo[left][right] > 0)
            return memo[left][right];
        int res = 0;
        for(int i = left + 1; i < right; i++)
        {
            res = max(res, nums[left] * nums[i] * nums[right] + burst(nums, memo, left, i) + burst(nums, memo, i, right));
        }
        memo[left][right] = res;
        return res;
    }
    int maxCoins(vector<int>& nums) {
        int res = 0;
        vector<int>n;
        n.push_back(1);
        for(auto i: nums)
        {
            if(i > 0)
                n.push_back(i);
        }
        n.push_back(1);
        vector<vector<int> >memo(n.size(), vector<int>(n.size(), -1));
        return burst(n, memo, 0, n.size() - 1);
    }
};
