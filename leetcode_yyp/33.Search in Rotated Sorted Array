/*
题目大意：
	假定一个数组是由有序数组从一个位置处翻转得到的，从这个数组中寻找给定值（target)的下标,若数组中不存在这个值，则返回-1.
解题思路：
	二分查找的变体。数组左指针是low（初始为0），右指针是high（初始为数组长度减1），每次比较target和下标为med处的值（med=（low+high）/2），若相等，则返回med；否则，若med右边有序，如果target在这个范围内，则更新low，否则更新high；若med左边有序，如果target在这个范围内，则更新high，否则更新low。若未找到，返回-1.
*/
class Solution {
public:
    int search(vector<int>& nums, int target)
{
	int low = 0, high = nums.size() - 1, med;
	int index = -1;
	while(low <= high)
	{
		med = (low + high) / 2;
		if(nums[med] == target)
			return med;
		else if(nums[med] <= nums[high])
		{
			if(target > nums[med] && target <= nums[high])
				low = med + 1;
			else
				high = med - 1;
		}
		else if(nums[med] >= nums[low])
		{
			if(target < nums[med] && target >= nums[low])
				high = med - 1;
			else
				low = med + 1;
		}
	}
    return -1;  
}
};