/*
题目大意：
	给定一个2D格板（每个格子一个字符）和一个单词，判断这个单词是否在这个格子中。这个单词可以用格板中的相邻字符构成，相邻指的的上下或者左右相邻，相同字符不可以用多次。
解题思路：
	DFS。从格板的每个开始位置（只从开始位置等于单词首字符的位置）开始，按上下左右四个方向进行深度搜索，当找到这个单词后，返回true。
注意的点：
	由于每个格子只能被访问一次，所以要记录每个格子是否被访问过。
	另外，开始时search函数用的是void，参数里有flag，当找到时更改flag，这样会超时，为找到后快速返回，将search改为bool型。
*/
class Solution {
public:
    bool search(vector<vector<char> >& board, string word, int i, int j, int index, vector<vector<int> >&visited)
	{
		bool flag = false;
		if(!(i >= 0 && i < board.size() && j >= 0 && j < board[0].size()))
			return false;
		if(visited[i][j] == 0 && word[index] == board[i][j])
		{
			visited[i][j] = 1;
			if(index == word.size() - 1)
			{
				return true;
			}
			flag = (search(board, word, i + 1, j, index + 1, visited) ||
			search(board, word, i - 1, j, index + 1, visited) || 
			search(board, word, i, j + 1, index + 1, visited) ||
			search(board, word, i, j - 1, index + 1, visited));
			visited[i][j] = 0;
		}
		return flag;
	}
	bool exist(vector<vector<char> >& board, string word)
	{
		vector<vector<int> >visited;
		vector<int>tmp(board[0].size(), 0);
		for(int i = 0; i < board.size(); i++)
		{
			visited.push_back(tmp);
		}
		bool flag = false;
		for(int i = 0; i < board.size(); i++)
		{
			for(int j = 0; j < board[0].size(); j++)
			{
				if(board[i][j] == word[0])
				{
					if(search(board, word, i, j, 0, visited) == true)
						return true;
				}
			}
		}
		return false;  
	}
};