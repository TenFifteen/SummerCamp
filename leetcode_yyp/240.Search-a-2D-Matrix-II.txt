题目大意：
	给定一个m*n的矩阵，判断一个给定的数是否在该矩阵中。该矩阵有两个性质，每行升序排序，每列升序排序。
解题思路：
	二分查找。首先根据每行行首元素找到可能包含该值的行，然后对每行二分搜索。问题：
	ac后才看到对各列都是升序排序的，所以可以对代码进行优化。
class Solution {
public:
    bool find(vector<vector<int> >&matrix, int index, int target, int col)
    {
        if(matrix[index][col - 1] < target)
            return false;
        int l = 0, h = col - 1, me;
        while(l < h)
        {
            me = (l + h) / 2;
            if(matrix[index][me] == target)
                return true;
            else if(matrix[index][me] > target)
                h = me - 1;
            else 
                l = me + 1;
        }
        return matrix[index][l] == target;
    }
    bool searchMatrix(vector<vector<int> >& matrix, int target) {
        int m = matrix.size();
        if(m == 0)
            return false;
        int n = matrix[0].size();
        int high = m - 1, med, low = 0;
        while(low <= high)
        {
            med = (low + high) / 2;
            if(matrix[med][0] == target)
                return true;
            else if(matrix[med][0] > target)
                high = med - 1;
            else
                low = med + 1;
        }
        for(int i = 0; i < low; i++)
        {
            if(find(matrix, i, target, n))
                return true;
        }
        return false;
    }
};
