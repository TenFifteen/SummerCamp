/*
题目大意：
	给定一个包含'X'和'O'的2d板，捕捉能被'X'包围的所有区域。一个区域如果能被捕捉，则将该区域内所有的'O'变成'X'
解题思路：
	此题不难，但是较为麻烦，卡了不少时间。根据题意，最外一圈的'O'肯定会被保留，然后从最外一圈能到达的'O'也会被保留。所以对最外一层的'o'进行dfs即可。开始时设置了visited数组来标记当前字符是否被访问到，可是提交超时，所以看别人的思路，改为更改当前不会被修改字符'O'为'#',后发现这根本不是问题，超时的原因在于在dfs代码中边界仍然列入考虑范围，修改后通过。

*/


class Solution {
public:
    void dfs(vector<vector<char> >& board, int x, int y)
    {
        int m = board.size(), n = board[0].size();
        if(y - 1 > 0 && board[x][y - 1] == 'O')
        {
            board[x][y - 1] = '#';
            dfs(board, x, y - 1);
        }
        if(y + 1 < n &&  board[x][y + 1] == 'O')
        {
            board[x][y + 1] = '#';
            dfs(board, x, y + 1);
        }
        if(x - 1 > 0 && board[x - 1][y] == 'O')
        {
            board[x - 1][y] = '#';
            dfs(board, x - 1, y);
        }
        if(x + 1 < m && board[x + 1][y] == 'O')
        {
            board[x + 1][y] = '#';
            dfs(board, x + 1, y);
        }
    }
    void solve(vector<vector<char> >& board)
    {
        if(board.size() == 0)
            return;
        int m = board.size(), n = board[0].size();
        if(m < 2 || n < 2)
            return;
        for(int i = 0; i < n; i++)
        {
            if(board[0][i] == 'O')
            {
                board[0][i] = '#';
                dfs(board, 0, i);
            }
        }
        for(int i = 1; i < m; i++)
        {
            if(board[i][0] == 'O')
            {
                board[i][0] = '#';
                dfs(board, i, 0);
            }
        }
        for(int i = 1; i < m; i++)
        {
            if(board[i][n - 1] == 'O')
            {
                board[i][n - 1] = '#';
                dfs(board, i, n - 1);
            }
        }
        for(int i = 1; i < n - 1; i++)
        {
            if(board[m - 1][i] == 'O')
            {
                board[m - 1][i] = '#';
                dfs(board, m - 1, i);
            }
        }
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(board[i][j] == '#')
                {
                    board[i][j] = 'O';
                }
                else if(board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
            }
        }
    }
};