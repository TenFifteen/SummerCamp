题目大意：
	给定一个整数数组，返回下标i,j之间的数的和。数组经常会更新和求和。
解题思路：
	线段树。非根节点存储其区间的和，每次有更新，从叶子节点更新到跟节点即可。求和时，将所求区间包括的区间求和即可。
class NumArray {   
private:
    vector<int>seg;
    vector<int>num;
    void build(vector<int> &nums, vector<int>& seg, int root, int low, int high)
    {
        if(low == high)
            seg[root] = nums[low];
        else
        {
            int mid = (low + high) / 2;
            build(nums, seg, 2 * root + 1, low, mid);
            build(nums, seg, 2 * root + 2, mid + 1, high);
            seg[root] = seg[2 * root + 1] + seg[2 * root + 2];
        }
    }
    int query(vector<int> &nums, vector<int>&seg, int root, int low, int high, int i, int j)
    {
        if(low > j || high < i)
            return 0;
        if(low >= i && j >= high)
            return seg[root];
        int mid = (low + high) / 2;
        return query(nums, seg, root * 2 + 1, low, mid, i, j) + query(nums, seg, root * 2 + 2, mid + 1, high, i, j);
    }
    void updateSeg(vector<int>&nums, vector<int>&seg, int root, int low, int high, int i, int addVal)
    {
        if(low == high)
        {
            if(low == i)
            {
                nums[low] += addVal;
                seg[root] += addVal;
            }
            return;
        }
        int mid = (low + high) / 2;
        if(i <= mid)
            updateSeg(nums, seg, root * 2 + 1, low, mid, i, addVal);
        else
            updateSeg(nums, seg, root * 2 + 2, mid + 1, high, i, addVal);  
        seg[root] = seg[root * 2 + 1] + seg[root * 2 + 2];
    }
public:
    NumArray(vector<int> &nums) {
        if(nums.size() == 0)
            return;
        for(int i = 0; i < 2 * nums.size(); i++)
            seg.push_back(0);
        build(nums, seg, 0, 0, nums.size() - 1);
        num = nums;
    }

    void update(int i, int val) {
        updateSeg(num, seg, 0, 0, num.size() - 1, i, val - num[i]);
    }

    int sumRange(int i, int j) {
        return query(num, seg, 0, 0, num.size() - 1, i, j);
    }
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
