/*
题目大意：
	给定一个包括不同的数的集合，返回它所有的子集。要求子集中的数是非递减的，方案集合不能包含重复子集。
解题思路：
	在一个集合中选子集，当前元素，要么选，要么不选，总共有2^n中可能，所以递归实现，每到一个下标处，要么选该元素，加入结果集合中，要么不选。
注意的点：
	记得将空集加入结果中。看了网上的解法很赞的解法是基于位操作。
*/
class Solution {
public:
    void choose(vector<vector<int> >&res, int index, vector<int>&tmp, vector<int> & nums)
	{
		if(index == nums.size())
			return;
			
		tmp.push_back(nums[index]);
		res.push_back(tmp);
		choose(res, index + 1, tmp, nums);
		tmp.pop_back();

		choose(res, index + 1, tmp, nums);	
	}
	vector<vector<int> > subsets(vector<int>& nums)
	{
		vector<vector<int> >res;
		if(nums.size() == 0)
			return res;
		sort(nums.begin(), nums.end());
		vector<int>tmp; 
		res.push_back(tmp);       
		choose(res, 0, tmp, nums);
		return res;
	}
};
