/*
题目大意：
	给定一个链表，交换两个相邻节点的值，返回头指针。如：给定1->2->3->4，要求返回2->1->4->3。要求只能用常数空间。
解题思路：
	每次交换前先判断是否还有大于等于2个节点需要交换，如果是，交换两个节点，直到到链表尾部。
注意的点：
	需要有一个真正标记换过的链表的尾部，以将当前换的两个节点接到结果链表尾部。
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head)
    {
        if(head == NULL || head->next == NULL)
            return head;
        ListNode * cur = head;
        ListNode * tmp, *pre;
        int flag = -1;
        while(cur != NULL && cur->next != NULL)
        {
            tmp = cur->next;
            cur->next = cur->next->next;
            tmp->next = cur;
            cur = cur->next;
            if(flag == -1)
            {
                flag = 1;
                head = tmp;
                pre = tmp->next;
            }
            else
            {
                pre->next = tmp;
                pre = tmp->next;
            }
        }
        return head;
    }
};