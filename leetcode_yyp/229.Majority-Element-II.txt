题目大意：
	给定一个包括n个数的数组，返回总数超过n/3的所有数。
解题思路：
	思路同I，每三个数若不相同，则每个数记录数减一，若与其中一个数相同，则该数记录数加一。最后，对记录的数遍历一遍数组，若其总数超过n/3,则放入结果数组中。
注意的点：
	困于判断最后得到的两个数是否是超过总数1/3良久，后知遍历即可！！！
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        long x1 = INT_MIN - 1, x2 = INT_MIN - 1;
        int count1 = 0, count2 = 0, flag = -1;
        vector<int>res;
        if(nums.size() == 0)
            return res;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == x1)
            {
                count1++;
            }
            else if(nums[i] == x2)
            {
                count2++;
            }
            else if(x1 == INT_MIN - 1)
            {
                x1 = nums[i];
                count1 = 1;
            }
            else if(x2 == INT_MIN - 1)
            {
                x2 = nums[i];
                count2 = 1;
            }
            else if(nums[i] != x1 && nums[i] != x2)
            {
                count1--;
                count2--;
                x1 = count1 == 0 ? INT_MIN - 1: x1;
                x2 = count2 == 0 ? INT_MIN - 1: x2;
                flag = 1;
            }
        }
        cout << x1 << "\t" << count1 << "\t" << x2 << "\t" << count2 << endl;
        count1 = 0;
        count2 = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] == x1)
                count1++;
            else if(nums[i] == x2)
                count2++;
        }
        if(count1 > nums.size() / 3)
            res.push_back(x1);
        if(count2 > nums.size() / 3)
            res.push_back(x2);
        return res;
    }
};
