题目大意：
	给定一个充满0和1的2d矩阵，返回其包含的最大正方形面积。
解题思路：
	动归。首先处理边界，第0行和第0列，然后对matrix[i][j]的节点而言，若其位'0',则能形成的最大正方形为0，否则，其形成的正方形最大为左边，上边，左上的节点能形成正方形的最小值加一。
class Solution {
public:
    int maximalSquare(vector<vector<char> >& matrix) {
        int m = matrix.size();
        if(m == 0)
            return 0;
        int n = matrix[0].size();
        int p[m][n] = {0};
        int res = 0;
        for(int i = 0; i < m; i++)
        {
            p[i][0] = matrix[i][0] - '0';
            res = max(p[i][0], res);
        }
        for(int i = 1; i < n; i++)
        {
            p[0][i] = matrix[0][i] - '0';
            res = max(p[0][i], res);
        }
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(matrix[i][j] == '0')
                {
                    p[i][j] = 0;
                }
                else
                {
                    p[i][j] = min(p[i - 1][j], min(p[i][j - 1], p[i - 1][j - 1])) + 1;
                    res = max(res, p[i][j]);
                }
            }
        }
        return res * res;
    }
};
