/*
题目大意：
	给定一个n个数的数组，找其中四个数之和等于目标值（a+b+c+d=target），找到所有这样的四元集返回，要求a<=b<=c<=d，且结果中不含重复的项。
解题思路：
	思路同3sum，只是这时应该固定两个数，另外两个数一头一尾往中间扫。
注意的点：
	同3sum，要去掉重复的解，所以要跳过相邻两数相等的情况。

*/
class Solution {
public:
    static bool comp(int a, int b)
{
	return a < b;
}
vector<vector<int> > fourSum(vector<int>& nums, int target)
{
	vector<vector<int> >res;
	if(nums.size() < 4)
	    return res;
	sort(nums.begin(), nums.end(),comp);
	vector<int>tmp;
	int sum, j, k;
	for(int h = 0; h < nums.size() - 3; h++)
	{
		for(int i = h + 1; i < nums.size() - 2; i++)
		{
		    j = i + 1, k = nums.size() - 1; 
			while(j < k)
			{
				sum = nums[h] + nums[i] + nums[j] + nums[k];
				if(sum == target)
				{
					tmp.push_back(nums[h]);
					tmp.push_back(nums[i]);
					tmp.push_back(nums[j]);
					tmp.push_back(nums[k]);
					res.push_back(tmp);
					tmp.clear();
					j++;
					k--;
					while(j  < nums.size() - 1 && nums[j] == nums[j - 1])
					    j++;
					while(k > j && nums[k] == nums[k + 1])
					    k--;
				}
				else
				{
					sum > target ? k-- : j++; 
				}
			}
			while(i < nums.size() - 2 && nums[i] == nums[i + 1]) 
			{
				i++;
			}
		}
		while(h < nums.size() - 3 && nums[h] == nums[h + 1]) 
		{
			h++;
		}
	}
	return res;    
}
};