题目大意：
	.匹配任意单个字符，*匹配前一个字符的0或多个。判断p能否匹配s。
解题思路：
	递归解法，当p的当前字符的后一个字符是*时，当前字符可匹配0个或者多个。动归解法，f[i][j]由f[i-1][j-1],f[i][j-2],f[i-1][j]得到。
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.size(), n = p.size();
        vector<vector<bool> >f(m + 1, vector<bool>(n + 1, false));
        f[0][0] = true;
        for(int i = 1; i <= m; i++)
            f[i][0] = false;
        for(int j = 1; j <= n; j++)
            f[0][j] = j > 1 && p[j - 1] == '*' && f[0][j - 2];
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(p[j - 1] == '*') {
                    f[i][j] = f[i][j - 2] || (f[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));
                } else {
                    f[i][j] =  f[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
                }
            }
        }
        return f[m][n];
    }
    /*
    bool isMatch(string s, string p) {
        if(p.size() == 0) return s.size() == 0;
        if(p.size() > 1 && p[1] == '*') {
            return isMatch(s, p.substr(2)) || (s.size() != 0 && (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p));
        } else {
            return s.size() > 0 && (s[0] == p[0] || p[0] == '.')? isMatch(s.substr(1), p.substr(1)) : false;
        }
    }
    */
};
